{"version":3,"sources":["components/Bin2dec.js","App.js","reportWebVitals.js","index.js"],"names":["Bin2dec","useState","total","setTotal","isVaild","setIsVaild","className","type","placeholder","onChange","event","bin_value","target","value","n","length","base","dec_value","i","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAkDeA,MA/Cf,WAAoB,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,OAEaF,mBAAS,IAFtB,mBAEVG,EAFU,KAEDC,EAFC,KAwBjB,OACE,sBAAKC,UAAU,UAAf,UACE,yCACA,iFACa,KAAZF,EACC,mBAAGE,UAAWF,EAAU,UAAY,SAApC,SACGA,EACG,wBACA,8DAGN,IAEF,uBAAOG,KAAK,OAAOC,YAAaN,EAAOO,SAjCtB,SAACC,GAKpB,IAJA,IAAIC,EAAYD,EAAME,OAAOC,MACzBC,EAAIH,EAAUI,OAAS,EACvBC,EAAO,EACPC,EAAY,EACPC,EAAIJ,EAAGI,GAAK,EAAGA,IAAK,CAC3B,GAAqB,MAAjBP,EAAUO,IAA+B,MAAjBP,EAAUO,GAE/B,CACLb,GAAW,GACX,MAHAA,GAAW,GAMf,IAAK,IAAIa,EAAIJ,EAAGI,GAAK,EAAGA,IACtBD,GAAaN,EAAUO,GAAKF,EAC5BA,GAAc,EAEhBb,EAASc,MAiBP,4BACa,KAAVf,GAAgBE,EACbF,EACA,8CCjCGiB,MARf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,cAAC,EAAD,OCMSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aa32a361.chunk.js","sourcesContent":["import './Bin2dec.css'\r\nimport React, { useState } from 'react'\r\n\r\nfunction Bin2dec() {\r\n  const [total, setTotal] = useState('')\r\n  const [isVaild, setIsVaild] = useState('')\r\n\r\n  const binaryHandle = (event) => {\r\n    let bin_value = event.target.value\r\n    let n = bin_value.length - 1\r\n    let base = 1\r\n    let dec_value = 0\r\n    for (let i = n; i >= 0; i--) {\r\n      if (bin_value[i] === '0' || bin_value[i] === '1') {\r\n        setIsVaild(true)\r\n      } else {\r\n        setIsVaild(false)\r\n        break\r\n      }\r\n    }\r\n    for (let i = n; i >= 0; i--) {\r\n      dec_value += bin_value[i] * base\r\n      base = base * 2\r\n    }\r\n    setTotal(dec_value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"bin2dec\">\r\n      <h1>Bin2Dec</h1>\r\n      <p>Enter a binary number, get a decimal conversion.</p>\r\n      {isVaild !== '' ? (\r\n        <p className={isVaild ? 'success' : 'danger'}>\r\n          {isVaild\r\n            ? 'Here is your decimal!'\r\n            : 'You entered a non-binary digit (please enter only 0 or 1)'}\r\n        </p>\r\n      ) : (\r\n        ' '\r\n      )}\r\n      <input type=\"text\" placeholder={total} onChange={binaryHandle} />\r\n      <p>\r\n        {total !== '' && isVaild\r\n          ? total\r\n          : 'wating for a valid binary number..^-^'}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bin2dec\r\n","import './App.css';\nimport Bin2dec from './components/Bin2dec'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Bin2dec/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}